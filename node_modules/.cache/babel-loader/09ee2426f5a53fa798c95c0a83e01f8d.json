{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useEffect, useReducer, useState } from 'react';\nimport axios from 'axios';\nconst initialState = {\n  data: null,\n  loading: true,\n  error: null\n};\n\nconst reducer = (state, action) => {\n  switch (action.type) {\n    case 'FETCH_INIT':\n      return { ...state,\n        loading: true,\n        error: null\n      };\n\n    case 'FETCH_SUCCESS':\n      return { ...state,\n        loading: false,\n        data: action.payload\n      };\n\n    case 'FETCH_FAILURE':\n      return { ...state,\n        loading: false,\n        error: action.payload\n      };\n\n    default:\n      throw new Error('Invalid action type');\n  }\n};\n\nexport const useFetch = url => {\n  _s();\n\n  const [state, dispatch] = useReducer(reducer, initialState);\n  const [isMounted, setIsMounted] = useState(true);\n  useEffect(() => {\n    return () => {\n      setIsMounted(false);\n    };\n  }, []);\n  useEffect(() => {\n    const fetchData = async () => {\n      dispatch({\n        type: 'FETCH_INIT'\n      });\n\n      try {\n        const cachedData = localStorage.getItem(url);\n\n        if (cachedData) {\n          dispatch({\n            type: 'FETCH_SUCCESS',\n            payload: JSON.parse(cachedData)\n          });\n        } else {\n          const response = await axios.get(url);\n          const json = response.data;\n          dispatch({\n            type: 'FETCH_SUCCESS',\n            payload: json\n          });\n          localStorage.setItem(url, JSON.stringify(json));\n        }\n      } catch (error) {\n        dispatch({\n          type: 'FETCH_FAILURE',\n          payload: error.message\n        });\n      }\n    };\n\n    if (isMounted) {\n      fetchData();\n    }\n\n    return () => {\n      setIsMounted(false);\n    };\n  }, [url, isMounted]);\n  return state;\n};\n\n_s(useFetch, \"FJ12PxqjnRhWBlwjQ/baFm/bYSc=\");","map":{"version":3,"names":["useEffect","useReducer","useState","axios","initialState","data","loading","error","reducer","state","action","type","payload","Error","useFetch","url","dispatch","isMounted","setIsMounted","fetchData","cachedData","localStorage","getItem","JSON","parse","response","get","json","setItem","stringify","message"],"sources":["C:/Users/Adrian1/Desktop/final-frontIII-Adrian-pucheta/src/Components/utils/useFetch.js"],"sourcesContent":["import {useEffect, useReducer, useState} from 'react';\r\nimport axios from 'axios';\r\n\r\nconst initialState = {\r\n    data: null,\r\n    loading: true,\r\n    error: null,\r\n};\r\n\r\nconst reducer = (state, action) => {\r\n    switch (action.type) {\r\n        case 'FETCH_INIT':\r\n            return {...state, loading: true, error: null};\r\n        case 'FETCH_SUCCESS':\r\n            return {...state, loading: false, data: action.payload};\r\n        case 'FETCH_FAILURE':\r\n            return {...state, loading: false, error: action.payload};\r\n        default:\r\n            throw new Error('Invalid action type');\r\n    }\r\n};\r\n\r\nexport const useFetch = (url) => {\r\n    const [state, dispatch] = useReducer(reducer, initialState);\r\n    const [isMounted, setIsMounted] = useState(true);\r\n\r\n    useEffect(() => {\r\n        return () => {\r\n            setIsMounted(false);\r\n        };\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        const fetchData = async () => {\r\n            dispatch({type: 'FETCH_INIT'});\r\n\r\n            try {\r\n                const cachedData = localStorage.getItem(url);\r\n\r\n                if (cachedData) {\r\n                    dispatch({type: 'FETCH_SUCCESS', payload: JSON.parse(cachedData)});\r\n                } else {\r\n                    const response = await axios.get(url);\r\n\r\n                    const json = response.data;\r\n                    dispatch({type: 'FETCH_SUCCESS', payload: json});\r\n\r\n                    localStorage.setItem(url, JSON.stringify(json));\r\n                }\r\n            } catch (error) {\r\n                dispatch({type: 'FETCH_FAILURE', payload: error.message});\r\n            }\r\n        };\r\n\r\n        if (isMounted) {\r\n            fetchData();\r\n        }\r\n\r\n        return () => {\r\n            setIsMounted(false);\r\n        };\r\n    }, [url, isMounted]);\r\n\r\n    return state;\r\n};"],"mappings":";;AAAA,SAAQA,SAAR,EAAmBC,UAAnB,EAA+BC,QAA/B,QAA8C,OAA9C;AACA,OAAOC,KAAP,MAAkB,OAAlB;AAEA,MAAMC,YAAY,GAAG;EACjBC,IAAI,EAAE,IADW;EAEjBC,OAAO,EAAE,IAFQ;EAGjBC,KAAK,EAAE;AAHU,CAArB;;AAMA,MAAMC,OAAO,GAAG,CAACC,KAAD,EAAQC,MAAR,KAAmB;EAC/B,QAAQA,MAAM,CAACC,IAAf;IACI,KAAK,YAAL;MACI,OAAO,EAAC,GAAGF,KAAJ;QAAWH,OAAO,EAAE,IAApB;QAA0BC,KAAK,EAAE;MAAjC,CAAP;;IACJ,KAAK,eAAL;MACI,OAAO,EAAC,GAAGE,KAAJ;QAAWH,OAAO,EAAE,KAApB;QAA2BD,IAAI,EAAEK,MAAM,CAACE;MAAxC,CAAP;;IACJ,KAAK,eAAL;MACI,OAAO,EAAC,GAAGH,KAAJ;QAAWH,OAAO,EAAE,KAApB;QAA2BC,KAAK,EAAEG,MAAM,CAACE;MAAzC,CAAP;;IACJ;MACI,MAAM,IAAIC,KAAJ,CAAU,qBAAV,CAAN;EARR;AAUH,CAXD;;AAaA,OAAO,MAAMC,QAAQ,GAAIC,GAAD,IAAS;EAAA;;EAC7B,MAAM,CAACN,KAAD,EAAQO,QAAR,IAAoBf,UAAU,CAACO,OAAD,EAAUJ,YAAV,CAApC;EACA,MAAM,CAACa,SAAD,EAAYC,YAAZ,IAA4BhB,QAAQ,CAAC,IAAD,CAA1C;EAEAF,SAAS,CAAC,MAAM;IACZ,OAAO,MAAM;MACTkB,YAAY,CAAC,KAAD,CAAZ;IACH,CAFD;EAGH,CAJQ,EAIN,EAJM,CAAT;EAMAlB,SAAS,CAAC,MAAM;IACZ,MAAMmB,SAAS,GAAG,YAAY;MAC1BH,QAAQ,CAAC;QAACL,IAAI,EAAE;MAAP,CAAD,CAAR;;MAEA,IAAI;QACA,MAAMS,UAAU,GAAGC,YAAY,CAACC,OAAb,CAAqBP,GAArB,CAAnB;;QAEA,IAAIK,UAAJ,EAAgB;UACZJ,QAAQ,CAAC;YAACL,IAAI,EAAE,eAAP;YAAwBC,OAAO,EAAEW,IAAI,CAACC,KAAL,CAAWJ,UAAX;UAAjC,CAAD,CAAR;QACH,CAFD,MAEO;UACH,MAAMK,QAAQ,GAAG,MAAMtB,KAAK,CAACuB,GAAN,CAAUX,GAAV,CAAvB;UAEA,MAAMY,IAAI,GAAGF,QAAQ,CAACpB,IAAtB;UACAW,QAAQ,CAAC;YAACL,IAAI,EAAE,eAAP;YAAwBC,OAAO,EAAEe;UAAjC,CAAD,CAAR;UAEAN,YAAY,CAACO,OAAb,CAAqBb,GAArB,EAA0BQ,IAAI,CAACM,SAAL,CAAeF,IAAf,CAA1B;QACH;MACJ,CAbD,CAaE,OAAOpB,KAAP,EAAc;QACZS,QAAQ,CAAC;UAACL,IAAI,EAAE,eAAP;UAAwBC,OAAO,EAAEL,KAAK,CAACuB;QAAvC,CAAD,CAAR;MACH;IACJ,CAnBD;;IAqBA,IAAIb,SAAJ,EAAe;MACXE,SAAS;IACZ;;IAED,OAAO,MAAM;MACTD,YAAY,CAAC,KAAD,CAAZ;IACH,CAFD;EAGH,CA7BQ,EA6BN,CAACH,GAAD,EAAME,SAAN,CA7BM,CAAT;EA+BA,OAAOR,KAAP;AACH,CA1CM;;GAAMK,Q"},"metadata":{},"sourceType":"module"}